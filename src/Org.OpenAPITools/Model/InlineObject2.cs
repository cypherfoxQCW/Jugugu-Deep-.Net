/* 
 * Jugugu密钥Fast模式
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InlineObject2
    /// </summary>
    [DataContract]
    public partial class InlineObject2 :  IEquatable<InlineObject2>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject2" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InlineObject2() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject2" /> class.
        /// </summary>
        /// <param name="phone">phone (required).</param>
        /// <param name="address">address (required).</param>
        /// <param name="account">通过接入jugugu申请 (required).</param>
        /// <param name="secret">通过接入jugugu申请 (required).</param>
        /// <param name="time">int64类型 (required).</param>
        /// <param name="token">通过登录获得，首次注册时也会获得 (required).</param>
        /// <param name="openid">项目方账户系统的唯一识别码，用于绑定登录jugugu系统 (required).</param>
        /// <param name="contract">正式网合约：cfx:acb2027ht5t916d323zjfw9knrdj42fm8ay9n7e3x0  测试网合约：cfxtest:acbk50byfusjyh7494rm8yd8xhnkdh9jyetgadzem4 (required).</param>
        /// <param name="nftid">nftid (required).</param>
        /// <param name="codestr">codestr (required).</param>
        /// <param name="chaintype">这里填cfx即可 (required).</param>
        public InlineObject2(string phone = default(string), string address = default(string), string account = default(string), string secret = default(string), int time = default(int), string token = default(string), string openid = default(string), string contract = default(string), string nftid = default(string), string codestr = default(string), string chaintype = default(string))
        {
            // to ensure "phone" is required (not null)
            if (phone == null)
            {
                throw new InvalidDataException("phone is a required property for InlineObject2 and cannot be null");
            }
            else
            {
                this.Phone = phone;
            }
            
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new InvalidDataException("address is a required property for InlineObject2 and cannot be null");
            }
            else
            {
                this.Address = address;
            }
            
            // to ensure "account" is required (not null)
            if (account == null)
            {
                throw new InvalidDataException("account is a required property for InlineObject2 and cannot be null");
            }
            else
            {
                this.Account = account;
            }
            
            // to ensure "secret" is required (not null)
            if (secret == null)
            {
                throw new InvalidDataException("secret is a required property for InlineObject2 and cannot be null");
            }
            else
            {
                this.Secret = secret;
            }
            
            // to ensure "time" is required (not null)
            if (time == null)
            {
                throw new InvalidDataException("time is a required property for InlineObject2 and cannot be null");
            }
            else
            {
                this.Time = time;
            }
            
            // to ensure "token" is required (not null)
            if (token == null)
            {
                throw new InvalidDataException("token is a required property for InlineObject2 and cannot be null");
            }
            else
            {
                this.Token = token;
            }
            
            // to ensure "openid" is required (not null)
            if (openid == null)
            {
                throw new InvalidDataException("openid is a required property for InlineObject2 and cannot be null");
            }
            else
            {
                this.Openid = openid;
            }
            
            // to ensure "contract" is required (not null)
            if (contract == null)
            {
                throw new InvalidDataException("contract is a required property for InlineObject2 and cannot be null");
            }
            else
            {
                this.Contract = contract;
            }
            
            // to ensure "nftid" is required (not null)
            if (nftid == null)
            {
                throw new InvalidDataException("nftid is a required property for InlineObject2 and cannot be null");
            }
            else
            {
                this.Nftid = nftid;
            }
            
            // to ensure "codestr" is required (not null)
            if (codestr == null)
            {
                throw new InvalidDataException("codestr is a required property for InlineObject2 and cannot be null");
            }
            else
            {
                this.Codestr = codestr;
            }
            
            // to ensure "chaintype" is required (not null)
            if (chaintype == null)
            {
                throw new InvalidDataException("chaintype is a required property for InlineObject2 and cannot be null");
            }
            else
            {
                this.Chaintype = chaintype;
            }
            
        }
        
        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// 通过接入jugugu申请
        /// </summary>
        /// <value>通过接入jugugu申请</value>
        [DataMember(Name="account", EmitDefaultValue=false)]
        public string Account { get; set; }

        /// <summary>
        /// 通过接入jugugu申请
        /// </summary>
        /// <value>通过接入jugugu申请</value>
        [DataMember(Name="secret", EmitDefaultValue=false)]
        public string Secret { get; set; }

        /// <summary>
        /// int64类型
        /// </summary>
        /// <value>int64类型</value>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public int Time { get; set; }

        /// <summary>
        /// 通过登录获得，首次注册时也会获得
        /// </summary>
        /// <value>通过登录获得，首次注册时也会获得</value>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// 项目方账户系统的唯一识别码，用于绑定登录jugugu系统
        /// </summary>
        /// <value>项目方账户系统的唯一识别码，用于绑定登录jugugu系统</value>
        [DataMember(Name="openid", EmitDefaultValue=false)]
        public string Openid { get; set; }

        /// <summary>
        /// 正式网合约：cfx:acb2027ht5t916d323zjfw9knrdj42fm8ay9n7e3x0  测试网合约：cfxtest:acbk50byfusjyh7494rm8yd8xhnkdh9jyetgadzem4
        /// </summary>
        /// <value>正式网合约：cfx:acb2027ht5t916d323zjfw9knrdj42fm8ay9n7e3x0  测试网合约：cfxtest:acbk50byfusjyh7494rm8yd8xhnkdh9jyetgadzem4</value>
        [DataMember(Name="contract", EmitDefaultValue=false)]
        public string Contract { get; set; }

        /// <summary>
        /// Gets or Sets Nftid
        /// </summary>
        [DataMember(Name="nftid", EmitDefaultValue=false)]
        public string Nftid { get; set; }

        /// <summary>
        /// Gets or Sets Codestr
        /// </summary>
        [DataMember(Name="codestr", EmitDefaultValue=false)]
        public string Codestr { get; set; }

        /// <summary>
        /// 这里填cfx即可
        /// </summary>
        /// <value>这里填cfx即可</value>
        [DataMember(Name="chaintype", EmitDefaultValue=false)]
        public string Chaintype { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineObject2 {\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Secret: ").Append(Secret).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Openid: ").Append(Openid).Append("\n");
            sb.Append("  Contract: ").Append(Contract).Append("\n");
            sb.Append("  Nftid: ").Append(Nftid).Append("\n");
            sb.Append("  Codestr: ").Append(Codestr).Append("\n");
            sb.Append("  Chaintype: ").Append(Chaintype).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineObject2);
        }

        /// <summary>
        /// Returns true if InlineObject2 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineObject2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineObject2 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.Secret == input.Secret ||
                    (this.Secret != null &&
                    this.Secret.Equals(input.Secret))
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.Openid == input.Openid ||
                    (this.Openid != null &&
                    this.Openid.Equals(input.Openid))
                ) && 
                (
                    this.Contract == input.Contract ||
                    (this.Contract != null &&
                    this.Contract.Equals(input.Contract))
                ) && 
                (
                    this.Nftid == input.Nftid ||
                    (this.Nftid != null &&
                    this.Nftid.Equals(input.Nftid))
                ) && 
                (
                    this.Codestr == input.Codestr ||
                    (this.Codestr != null &&
                    this.Codestr.Equals(input.Codestr))
                ) && 
                (
                    this.Chaintype == input.Chaintype ||
                    (this.Chaintype != null &&
                    this.Chaintype.Equals(input.Chaintype))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.Secret != null)
                    hashCode = hashCode * 59 + this.Secret.GetHashCode();
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.Openid != null)
                    hashCode = hashCode * 59 + this.Openid.GetHashCode();
                if (this.Contract != null)
                    hashCode = hashCode * 59 + this.Contract.GetHashCode();
                if (this.Nftid != null)
                    hashCode = hashCode * 59 + this.Nftid.GetHashCode();
                if (this.Codestr != null)
                    hashCode = hashCode * 59 + this.Codestr.GetHashCode();
                if (this.Chaintype != null)
                    hashCode = hashCode * 59 + this.Chaintype.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
