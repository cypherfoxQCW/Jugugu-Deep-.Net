/* 
 * Jugugu密钥Fast模式
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InlineResponse2001
    /// </summary>
    [DataContract]
    public partial class InlineResponse2001 :  IEquatable<InlineResponse2001>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2001" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InlineResponse2001() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2001" /> class.
        /// </summary>
        /// <param name="phone">phone (required).</param>
        /// <param name="confluxaddress">confluxaddress (required).</param>
        /// <param name="ethaddress">ethaddress (required).</param>
        /// <param name="paymentpassword">paymentpassword (required).</param>
        /// <param name="token">token (required).</param>
        public InlineResponse2001(string phone = default(string), string confluxaddress = default(string), string ethaddress = default(string), string paymentpassword = default(string), string token = default(string))
        {
            // to ensure "phone" is required (not null)
            if (phone == null)
            {
                throw new InvalidDataException("phone is a required property for InlineResponse2001 and cannot be null");
            }
            else
            {
                this.Phone = phone;
            }
            
            // to ensure "confluxaddress" is required (not null)
            if (confluxaddress == null)
            {
                throw new InvalidDataException("confluxaddress is a required property for InlineResponse2001 and cannot be null");
            }
            else
            {
                this.Confluxaddress = confluxaddress;
            }
            
            // to ensure "ethaddress" is required (not null)
            if (ethaddress == null)
            {
                throw new InvalidDataException("ethaddress is a required property for InlineResponse2001 and cannot be null");
            }
            else
            {
                this.Ethaddress = ethaddress;
            }
            
            // to ensure "paymentpassword" is required (not null)
            if (paymentpassword == null)
            {
                throw new InvalidDataException("paymentpassword is a required property for InlineResponse2001 and cannot be null");
            }
            else
            {
                this.Paymentpassword = paymentpassword;
            }
            
            // to ensure "token" is required (not null)
            if (token == null)
            {
                throw new InvalidDataException("token is a required property for InlineResponse2001 and cannot be null");
            }
            else
            {
                this.Token = token;
            }
            
        }
        
        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or Sets Confluxaddress
        /// </summary>
        [DataMember(Name="confluxaddress", EmitDefaultValue=false)]
        public string Confluxaddress { get; set; }

        /// <summary>
        /// Gets or Sets Ethaddress
        /// </summary>
        [DataMember(Name="ethaddress", EmitDefaultValue=false)]
        public string Ethaddress { get; set; }

        /// <summary>
        /// Gets or Sets Paymentpassword
        /// </summary>
        [DataMember(Name="paymentpassword", EmitDefaultValue=false)]
        public string Paymentpassword { get; set; }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2001 {\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Confluxaddress: ").Append(Confluxaddress).Append("\n");
            sb.Append("  Ethaddress: ").Append(Ethaddress).Append("\n");
            sb.Append("  Paymentpassword: ").Append(Paymentpassword).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2001);
        }

        /// <summary>
        /// Returns true if InlineResponse2001 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2001 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2001 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.Confluxaddress == input.Confluxaddress ||
                    (this.Confluxaddress != null &&
                    this.Confluxaddress.Equals(input.Confluxaddress))
                ) && 
                (
                    this.Ethaddress == input.Ethaddress ||
                    (this.Ethaddress != null &&
                    this.Ethaddress.Equals(input.Ethaddress))
                ) && 
                (
                    this.Paymentpassword == input.Paymentpassword ||
                    (this.Paymentpassword != null &&
                    this.Paymentpassword.Equals(input.Paymentpassword))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.Confluxaddress != null)
                    hashCode = hashCode * 59 + this.Confluxaddress.GetHashCode();
                if (this.Ethaddress != null)
                    hashCode = hashCode * 59 + this.Ethaddress.GetHashCode();
                if (this.Paymentpassword != null)
                    hashCode = hashCode * 59 + this.Paymentpassword.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
